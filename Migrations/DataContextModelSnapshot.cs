// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using aspnetapp.Helpers;

#nullable disable

namespace aspnetapp.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("aspnetapp.Entites.Action", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("User");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ActionData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserEmail", "Date");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("aspnetapp.Entites.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("User");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("aspnetapp.Entites.User", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("aspnetapp.Entites.Action", b =>
                {
                    b.HasOne("aspnetapp.Entites.User", "User")
                        .WithMany("Actions")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("aspnetapp.Entites.Token", b =>
                {
                    b.HasOne("aspnetapp.Entites.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("aspnetapp.Entites.User", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
